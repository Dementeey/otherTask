
Всем привет ;)

Ниже приведен список заданий, прочитайте, изучите. Если что-то будет не ясно пишите мне в слаке.
До втроника нужно выполнить основное задание.
Дополнительные задания дедлайн - пятница. НО, Кто может и хочет их сделать до вторника - милости прошу:)

Решение ваших заданий присылайте на почту kirill.ganzha@technorely.com c темой в письме - js-trainee


================================ОСНОВНОЕ ЗАДАНИЕ===============================

1) Нужно создать небольшое веб-приложение. Мы будем использовать данные
с https://www.tvmaze.com/api - веб-сайт и источник данных с
ТВ шоу, перед вами документация где вы сможете найти все нужные вам апи (если будет проблема с поиском, выбором нужных апи обращайтесь ко мне в слаке).
Наше приложение будет таблицей, которая позволяет пользователям
поиск и сортировка по телешоу. Вот спецификациядля нашей таблицы:

● В таблице телевизионных шоу будут отображаться следующие поля:
○ Show name
○ Language
○ Genres (maybe several)
○ Status of show
○ Rating
● Над таблицей должно быть поле для поиска ТВ-шоу. По нему будет осуществляться поиск.
- *поиск должен происходит на серверной стороне, т.е. с применением апи, после ввода нужного значения
идет запрос на сервер который возвращает найденные данные или нет (запрос будет лететь после того как вы нажмете кнопку Search).
 Если нет данных - отображать вместо таблицы строку 'По данному запросу нет данных'.
- *Таблица должна сортироваться по Rating и Show name.
- **сделать динамический поиск, т.е. без клика на кнопку - как только пользователь вводит значение - поиск должен осуществляться мгновенно - пример google search.

● Когда приложение загружается, оно должно начинаться с предварительно загруженного поиск "girls". (значение по умолчанию)
● При изменении значения поиска приложение должно отображать статус загрузки. (используйте любой прогресс бар или лоудер на ваше усмотрение)

Также оформите ваше приложение в подлежащем виде, не забываем про верстку, весь UI - цвета, размеры, гамма и т.д. на ваш вкус.

=========================ДОПОЛНИТЕЛЬНЫЕ ЗАДАНИЯ===================

2)
/*
1.) Почитайте про addEventListener, removeEventListener, bubbling, capturing
2.) Прочитайте про nextElementSibling, lastElementChild, insertBefore, previousElementSibling, firstElementChild, псевдомассив children
3.) Сделайте ф-цию, генерирующую всплывающее меню из определенной структуры
Пример структуры:

[
		{
				title: "products",
				subItems: [
						"apples",
						"bananas",
						"oranges"
				]
		},
		{
				title: "stores",
				subItems: [
						"SuperFruits",
						"MegaFruits",
						"GigaFruits"
				]
		}
]

из этого должен получиться ul/li с вложенностью. Сделать всплывание можно либо событиями js, либо псевдоклассом :hover  с помощью css. Это
задание немного прокачает и ваши css скиллы. Будут вопросы - стучите. Усложнения по собственной инициативе только приветствуются)
*/


3) Напишите функцию для создания таблицы размером NхM. Такой, чтобы каждая ячейка заполнялась случайной буквой алфавита
и случайным цветом фона (для выполнения задания, воспользуйтесь методомrandom() объекта Math; кроме того создайте массив в элементами – буквами алфавита)
Не использовать jQuery в данном задании.

4) И конечно задание для закрепления предыдущего материала.
/*
	ДЗ
	1.) Разберите код, который мы писали на занятии. Главные вещи, которые нужно понимать:
			* Что такое ф-ция конструктор?
			* Что такое new? Чем вызов ф-ции через new отличается от обычного?
			* Что такое цепочка __proto__?
			* У кого есть __proto__? У конструктора или у экземпляра?
			* Чем __proto__ отличается от prototype?
			* Для чего вообще придумали наследование?
			* Что такое this?

	2.) Сделайте конcтруктор CompanyWorker, который в качестве аргументов будет принимать имя, должность и зарплату.
	Потом сделайте конструктор Company, в котором есть методы addWorker, removeWorker.
	По аналогии с тем, что мы писали в Спалахе,
	 Company будет принимать в качестве сотрудников экземпляры CompanyWorker.

	3.) (Творческое) Дополните Company вспомогательными методами для поиска сотрудников(к примеру findByName).
*/


function CompanyWorker( name ){
		this.name = name;
}

CompanyWorker.prototype.changeOccupation = function( occupation ){
		this.occupation = occupation;

}

function Company(){
		this.workers = [];
}

/*Company.prototype = (function(){
		return {
				constructor: Company,

		}
})();*/

Company.prototype.addWorkers = function(){
		for( let i = 0; i < arguments.length; i++ ){
				this.workers.push( arguments[ i ] );
		}
}

Company.prototype.changeWorkersOccupations = function( newOccupation ){
		this.workers.forEach(function( worker ){
			//worker.occupation = newOccupation; <- Будете так писать - я вас найду
			worker.changeOccupation( newOccupation );
		});
}

Company.prototype.findWorker = function( name ){
		return this.workers.find( worker => worker.name === name );
		/*return this.workers.find(function( worker ){
				return worker.name === name;
		});*/
}

const C = new Company();

C.addWorkers(
		new CompanyWorker( "Peter" ),
		new CompanyWorker( "John" ),
		new CompanyWorker( "Mary" )
);

C.changeWorkersOccupations( "plumber" );

/*console.log( C.findWorker( "John" ) );
console.dir( C );*/

//console.log( "Check", Company.workers );

console.dir( Company.prototype );


